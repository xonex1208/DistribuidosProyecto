#include <OLED_I2C.h>
#define MAXBALAS 5
#define VELBALAS 5
#define RECARGA 8
#define MAXENEMIGOS 10
#define VELENEMIGOS 1
#define SEPENEMIGOS 20
#define PLAYER 1
#define ENEMIGO 2
#define BALA 3

OLED  myOLED(SDA, SCL);

extern const uint8_t TinyFont[];

const uint8_t foto[] PROGMEM={
0x55, 0x22, 0x55, 0xEF, 0x55, 0xAA, 0x55, 0xFF, 0x57, 0xBF, 0x55, 0xFF, 0x55, 0xBA, 0xFF, 0xFF,   // 0x0010 (16) pixels
0xFF, 0xFF, 0xFF, 0xFF, 0x77, 0xFF, 0x55, 0xFF, 0x55, 0xBB, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFE,   // 0x0020 (32) pixels
0x55, 0xBB, 0x55, 0xEE, 0x55, 0xBB, 0x55, 0x3E, 0x15, 0x0B, 0x15, 0x0F, 0x15, 0x03, 0x05, 0x0F,   // 0x0030 (48) pixels
0x15, 0x03, 0x05, 0x07, 0x15, 0x03, 0x05, 0x0F, 0x15, 0x1F, 0x15, 0x3F, 0x55, 0xBB, 0x55, 0xFF,   // 0x0040 (64) pixels
0x55, 0xBF, 0x55, 0xFF, 0x55, 0xBB, 0x55, 0xFF, 0x55, 0xBF, 0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFF,   // 0x0050 (80) pixels
0x55, 0xFF, 0x55, 0xFF, 0x55, 0x3F, 0x55, 0x0F, 0x15, 0x0F, 0x05, 0x0F, 0x15, 0x0F, 0x05, 0x0F,   // 0x0060 (96) pixels
0x15, 0x0F, 0x05, 0x0F, 0x15, 0x0F, 0x15, 0x0F, 0x15, 0x3F, 0x55, 0x3F, 0x55, 0xFB, 0x55, 0xFF,   // 0x0070 (112) pixels
0x55, 0xBF, 0x55, 0xFF, 0x55, 0xFB, 0x55, 0xFF, 0x55, 0xBF, 0x55, 0xFF, 0x55, 0xFB, 0x55, 0xFF,   // 0x0080 (128) pixels
0x57, 0x2A, 0x55, 0xAF, 0x55, 0xFB, 0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFF, 0xFF, 0xFF,   // 0x0090 (144) pixels
0xFF, 0xFF, 0xFF, 0xFF, 0x77, 0xFF, 0xD5, 0xFF, 0x55, 0xFF, 0x55, 0xFF, 0x55, 0xFB, 0x55, 0xFF,   // 0x00A0 (160) pixels
0x55, 0xBB, 0x55, 0x0F, 0x15, 0x02, 0x40, 0x00, 0x51, 0x20, 0x54, 0x88, 0x51, 0xA0, 0x54, 0xA0,   // 0x00B0 (176) pixels
0x51, 0xA0, 0x55, 0xC0, 0x51, 0xA0, 0x44, 0x80, 0x11, 0x00, 0x45, 0x00, 0x11, 0x00, 0x45, 0x0F,   // 0x00C0 (192) pixels
0x15, 0x3F, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFF, 0x55, 0xBF, 0x55, 0xFF, 0x55, 0xBB, 0x55, 0x03,   // 0x00D0 (208) pixels
0x15, 0x03, 0x01, 0x00, 0x11, 0x00, 0x40, 0x00, 0x11, 0x00, 0x40, 0x00, 0x51, 0x20, 0x50, 0xA0,   // 0x00E0 (224) pixels
0x51, 0xA0, 0x54, 0xA8, 0x50, 0xA0, 0x50, 0xE0, 0x51, 0xA0, 0x45, 0x80, 0x11, 0x00, 0x05, 0x03,   // 0x00F0 (240) pixels
0x15, 0x2F, 0x55, 0xFF, 0x55, 0xBF, 0x55, 0xFF, 0x55, 0xBF, 0x55, 0xFF, 0x55, 0xFB, 0x55, 0xFF,   // 0x0100 (256) pixels
0x57, 0x2A, 0x55, 0xFF, 0x55, 0xBF, 0x55, 0xFF, 0x55, 0xFF, 0x5D, 0xFF, 0x55, 0xFF, 0xFF, 0xFF,   // 0x0110 (272) pixels
0xFF, 0xFF, 0xFF, 0xFF, 0x77, 0xFF, 0xDD, 0xFF, 0x57, 0xFF, 0x55, 0xFF, 0x55, 0xFB, 0x55, 0xFF,   // 0x0120 (288) pixels
0x55, 0x00, 0x54, 0x00, 0x15, 0x00, 0x45, 0x88, 0x15, 0x2A, 0x55, 0x2A, 0x55, 0xBB, 0x55, 0xFE,   // 0x0130 (304) pixels
0x55, 0xBF, 0x55, 0xFF, 0x75, 0xFF, 0x55, 0xFE, 0x55, 0xBA, 0x55, 0x00, 0x51, 0x00, 0x00, 0x00,   // 0x0140 (320) pixels
0x41, 0x82, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFF, 0x55, 0xBB, 0x55, 0xA3, 0x11, 0x01, 0x01, 0x00,   // 0x0150 (336) pixels
0x01, 0x00, 0x44, 0x00, 0x11, 0x00, 0x55, 0x00, 0x15, 0x02, 0x55, 0x8A, 0x55, 0xA2, 0x55, 0xEA,   // 0x0160 (352) pixels
0x55, 0xBB, 0x55, 0xEE, 0x55, 0xFB, 0x55, 0xFF, 0x57, 0x3F, 0x55, 0xBF, 0x75, 0xF8, 0x54, 0x80,   // 0x0170 (368) pixels
0x11, 0x02, 0x55, 0xBF, 0x55, 0xBB, 0x55, 0xFF, 0x55, 0xBB, 0x55, 0xFF, 0x55, 0xBB, 0x55, 0xFF,   // 0x0180 (384) pixels
0x55, 0x22, 0x55, 0x0F, 0x55, 0x23, 0x55, 0x8F, 0x55, 0x2B, 0x55, 0xAE, 0xFF, 0xFF, 0xFF, 0xFF,   // 0x0190 (400) pixels
0x7F, 0xBF, 0x5F, 0xFF, 0x57, 0xBF, 0x55, 0xFF, 0x57, 0xBF, 0x55, 0xAF, 0x55, 0xBB, 0x55, 0x03,   // 0x01A0 (416) pixels
0x55, 0x20, 0x55, 0xA0, 0x51, 0x22, 0x55, 0x08, 0x15, 0x00, 0x55, 0xE8, 0x75, 0xBB, 0x55, 0xE8,   // 0x01B0 (432) pixels
0x55, 0x23, 0x55, 0x8B, 0x51, 0x33, 0x55, 0xAF, 0x55, 0x2B, 0x55, 0x00, 0x11, 0x80, 0x54, 0xFE,   // 0x01C0 (448) pixels
0x55, 0xBB, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFF, 0x55, 0xBB, 0x55, 0xAF, 0x11, 0x00, 0x00, 0x00,   // 0x01D0 (464) pixels
0x11, 0x00, 0x45, 0x00, 0x11, 0x00, 0x54, 0x08, 0x15, 0x08, 0x55, 0x00, 0x11, 0x00, 0x45, 0x02,   // 0x01E0 (480) pixels
0x15, 0xBF, 0x5D, 0xFE, 0x55, 0xAA, 0x55, 0x82, 0x55, 0x82, 0x55, 0xEF, 0x57, 0xFF, 0x5D, 0xFE,   // 0x01F0 (496) pixels
0x55, 0x00, 0x45, 0xAF, 0x55, 0xBB, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFF,   // 0x0200 (512) pixels
0x55, 0x22, 0x55, 0x08, 0x55, 0x22, 0x55, 0x88, 0x55, 0x22, 0x55, 0xFE, 0xFF, 0xFF, 0x55, 0xFF,   // 0x0210 (528) pixels
0x55, 0xBB, 0x55, 0xAE, 0x55, 0xBB, 0x55, 0xAA, 0x55, 0xBB, 0x55, 0x2E, 0x55, 0x03, 0x55, 0x00,   // 0x0220 (544) pixels
0x15, 0x02, 0x15, 0x02, 0x15, 0x00, 0x45, 0xC0, 0x55, 0xAA, 0x55, 0xEF, 0x55, 0xFB, 0x55, 0xFF,   // 0x0230 (560) pixels
0x57, 0xFE, 0x55, 0xFE, 0x55, 0xBF, 0x55, 0x0A, 0x15, 0x82, 0x45, 0xA0, 0x55, 0xBA, 0x55, 0xEE,   // 0x0240 (576) pixels
0x55, 0xBB, 0x55, 0xEE, 0x55, 0xBB, 0x55, 0xEE, 0x55, 0xBB, 0x55, 0xFF, 0x55, 0x00, 0x50, 0x00,   // 0x0250 (592) pixels
0x15, 0x00, 0x44, 0x00, 0x11, 0x00, 0x55, 0x00, 0x55, 0x20, 0x55, 0x00, 0x11, 0x00, 0x54, 0x00,   // 0x0260 (608) pixels
0x11, 0x02, 0x55, 0xFF, 0x77, 0xBF, 0x55, 0xFE, 0x55, 0x9B, 0x55, 0x3F, 0x55, 0xFB, 0x55, 0xFF,   // 0x0270 (624) pixels
0x77, 0xFE, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFE, 0x55, 0xBB, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFF,   // 0x0280 (640) pixels
0x55, 0x22, 0x55, 0x88, 0x55, 0xA2, 0x55, 0xE0, 0x55, 0xAA, 0x55, 0xAF, 0x57, 0xBB, 0x55, 0xAB,   // 0x0290 (656) pixels
0x55, 0xAB, 0x55, 0xAA, 0x55, 0x22, 0x55, 0xAA, 0x55, 0x22, 0x55, 0x00, 0x11, 0x00, 0x40, 0x00,   // 0x02A0 (672) pixels
0x11, 0x00, 0x55, 0x00, 0x51, 0x22, 0x54, 0xE0, 0x55, 0xAA, 0x55, 0xAA, 0x51, 0xA2, 0x55, 0x2B,   // 0x02B0 (688) pixels
0x55, 0x3B, 0x15, 0x0F, 0x55, 0xA2, 0x55, 0xEE, 0x55, 0xBB, 0x55, 0xAE, 0x55, 0xBB, 0x55, 0xAE,   // 0x02C0 (704) pixels
0x55, 0xBB, 0x55, 0xAF, 0x55, 0xBB, 0x55, 0xEE, 0x55, 0xBB, 0x55, 0xAF, 0x55, 0xBA, 0x54, 0xF8,   // 0x02D0 (720) pixels
0x51, 0xE0, 0x45, 0x00, 0x11, 0x00, 0x55, 0x02, 0x51, 0x00, 0x45, 0x00, 0x11, 0x00, 0x44, 0x00,   // 0x02E0 (736) pixels
0x55, 0x22, 0x55, 0xAF, 0x55, 0xAF, 0x55, 0xEF, 0x57, 0xEF, 0x55, 0xEE, 0x55, 0xF8, 0x55, 0xFF,   // 0x02F0 (752) pixels
0x75, 0xBF, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFE, 0x55, 0xBB, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xEE,   // 0x0300 (768) pixels
0x55, 0xAA, 0x55, 0xEE, 0x75, 0xFF, 0x55, 0xFF, 0x75, 0xFF, 0xD5, 0xEE, 0x55, 0xBA, 0x55, 0xEA,   // 0x0310 (784) pixels
0x55, 0xAB, 0x55, 0xAA, 0x55, 0xA2, 0x55, 0xA8, 0x55, 0x22, 0x55, 0x80, 0x51, 0x00, 0x40, 0x00,   // 0x0320 (800) pixels
0x11, 0x00, 0x05, 0x00, 0x11, 0x00, 0x45, 0x00, 0x11, 0x02, 0x45, 0x00, 0x51, 0x00, 0x40, 0x80,   // 0x0330 (816) pixels
0x51, 0x00, 0x55, 0x80, 0x55, 0xA0, 0x55, 0xAA, 0x55, 0x3B, 0x55, 0xAE, 0x55, 0xBB, 0x55, 0xAA,   // 0x0340 (832) pixels
0x55, 0xBB, 0x55, 0xAE, 0x55, 0xBB, 0x55, 0xAA, 0x55, 0xBB, 0x55, 0xAE, 0x55, 0xBB, 0x55, 0xEE,   // 0x0350 (848) pixels
0x55, 0xBB, 0x55, 0xFE, 0x51, 0x00, 0x44, 0x00, 0x11, 0x00, 0x05, 0x00, 0x11, 0x00, 0x55, 0x00,   // 0x0360 (864) pixels
0x55, 0x2B, 0x55, 0xAA, 0x55, 0xFB, 0x55, 0xFF, 0x77, 0xFF, 0x55, 0xFF, 0x55, 0xFB, 0x55, 0xFF,   // 0x0370 (880) pixels
0x55, 0xBB, 0x55, 0xEE, 0x55, 0xBB, 0x55, 0xEE, 0x55, 0xBB, 0x55, 0xEF, 0x55, 0xBB, 0x55, 0xFE,   // 0x0380 (896) pixels
0x55, 0x2A, 0x55, 0xCE, 0x57, 0xFF, 0x55, 0xFF, 0x77, 0xFF, 0x5F, 0xFF, 0x77, 0xFF, 0xFD, 0xFF,   // 0x0390 (912) pixels
0x77, 0xFF, 0x5D, 0xFF, 0x75, 0xFF, 0x55, 0xFE, 0x75, 0xFF, 0xFD, 0xFB, 0x75, 0xFE, 0x55, 0xFE,   // 0x03A0 (928) pixels
0x55, 0xBA, 0x55, 0xEA, 0x75, 0xFA, 0x75, 0xFA, 0x75, 0xFA, 0x55, 0xFA, 0x55, 0xBA, 0x55, 0xEE,   // 0x03B0 (944) pixels
0x55, 0x3A, 0x55, 0xAA, 0x55, 0x2A, 0x55, 0xAA, 0x55, 0x2A, 0x55, 0x2A, 0x55, 0x23, 0x15, 0x2A,   // 0x03C0 (960) pixels
0x15, 0x3B, 0x15, 0x2E, 0x15, 0x3B, 0x15, 0x2A, 0x15, 0x3B, 0x15, 0x0A, 0x15, 0x0B, 0x05, 0x02,   // 0x03D0 (976) pixels
0x01, 0x03, 0x41, 0x00, 0x01, 0x00, 0x04, 0x00, 0x11, 0x00, 0x44, 0x00, 0x51, 0x00, 0x40, 0x80,   // 0x03E0 (992) pixels
0x51, 0x20, 0x55, 0xAA, 0x55, 0xBB, 0x55, 0xAE, 0x55, 0xBB, 0x55, 0xFF, 0x55, 0x3F, 0x55, 0x3F,   // 0x03F0 (1008) pixels
0x15, 0x0A, 0x05, 0x00, 0x11, 0x01, 0x45, 0x02, 0x15, 0x03, 0x05, 0x03, 0x15, 0x03, 0x05, 0x0E,   // 0x0400 (1024) pixels
};

const uint8_t acerca[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0010 (16) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0020 (32) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0030 (48) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0040 (64) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0050 (80) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0060 (96) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0070 (112) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0080 (128) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0090 (144) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00A0 (160) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00B0 (176) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00C0 (192) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00D0 (208) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00E0 (224) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x00F0 (240) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0100 (256) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0x10,   // 0x0110 (272) pixels
  0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x92, 0x92, 0x92, 0x82,   // 0x0120 (288) pixels
  0x82, 0x82, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x82, 0x82, 0xE6, 0xE6, 0xE6, 0xE6, 0x00, 0xFE, 0xFE,   // 0x0130 (304) pixels
  0xFE, 0xFE, 0x10, 0x10, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x82, 0x82,   // 0x0140 (320) pixels
  0x82, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE,   // 0x0150 (336) pixels
  0xFE, 0x12, 0x12, 0x1E, 0x1E, 0x1E, 0x1E, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x82, 0x82, 0x82, 0xFE,   // 0x0160 (352) pixels
  0xFE, 0xFE, 0xFE, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x72, 0xF2, 0xFE, 0xFE, 0xDE, 0x9E, 0x00, 0xC6,   // 0x0170 (368) pixels
  0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0180 (384) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0190 (400) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01A0 (416) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01B0 (432) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01C0 (448) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01D0 (464) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01E0 (480) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x01F0 (496) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0200 (512) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0210 (528) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0220 (544) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x02, 0x02, 0xCE, 0xCE, 0xCE, 0xCE,   // 0x0230 (560) pixels
  0xCC, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8,   // 0x0240 (576) pixels
  0xF0, 0xF8, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFE,   // 0x0250 (592) pixels
  0xFE, 0xFE, 0xFE, 0xFE, 0x02, 0x02, 0x86, 0xFE, 0xFE, 0xFE, 0xFC, 0x78, 0x00, 0x00, 0x80, 0x80,   // 0x0260 (608) pixels
  0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0270 (624) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0280 (640) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0290 (656) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x02A0 (672) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,   // 0x02B0 (688) pixels
  0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,   // 0x02C0 (704) pixels
  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01,   // 0x02D0 (720) pixels
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,   // 0x02E0 (736) pixels
  0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x02F0 (752) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0300 (768) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0310 (784) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0320 (800) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0330 (816) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0340 (832) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0350 (848) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0360 (864) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0370 (880) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0380 (896) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0390 (912) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x03A0 (928) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x03B0 (944) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x03C0 (960) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x03D0 (976) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x03E0 (992) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x03F0 (1008) pixels
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0400 (1024) pixels
};

const uint8_t portada[] PROGMEM={//128x64
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00,
    0x10, 0x20, 0x50, 0x20, 0x70, 0x60, 0x50, 0xb0, 0x50, 0x30, 0x50, 0x20, 0x70, 0x20, 0x50, 0x40,
    0x51, 0xa0, 0x44, 0x00, 0x51, 0x00, 0x45, 0x80, 0x15, 0x03, 0x55, 0x0e, 0x15, 0x22, 0x55, 0x0a,
    0x14, 0x3c, 0x54, 0x08, 0x50, 0x10, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x45, 0x00, 0x11, 0x00, 0x45, 0x00, 0x15, 0x02, 0x05, 0x02, 0x15, 0x00, 0x45, 0x00,
    0x11, 0x02, 0x55, 0x03, 0x15, 0xfa, 0x55, 0x02, 0x11, 0x00, 0x45, 0x02, 0x55, 0x20, 0x54, 0x80,
    0x15, 0x02, 0x55, 0x08, 0x55, 0x3e, 0x55, 0x80, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x10, 0x00, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x44, 0x00, 0x10, 0x00, 0x44, 0x00, 0x01, 0x00, 0x04, 0x00, 0x11, 0x00, 0x45, 0x00,
    0x51, 0x00, 0x45, 0x80, 0x11, 0x23, 0x55, 0x00, 0x11, 0x00, 0x45, 0x00, 0x11, 0x00, 0x55, 0x20,
    0x55, 0x82, 0x55, 0x80, 0x55, 0x00, 0x55, 0x80, 0x55, 0xa0, 0x50, 0x80, 0x40, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x05, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x04, 0x00, 0x51, 0x02, 0x54, 0x20, 0x10, 0x00, 0x00, 0x00, 0x51, 0x20, 0x44, 0x18,
    0x15, 0x00, 0x05, 0x00, 0x51, 0x20, 0x54, 0x00, 0x11, 0x00, 0x04, 0x00, 0x11, 0x00, 0x50, 0x00,
    0x11, 0x01, 0x05, 0x01, 0x11, 0x03, 0x45, 0x02, 0x15, 0x02, 0x05, 0x02, 0x15, 0x00, 0x00, 0x00,
    0x15, 0x03, 0x05, 0x0e, 0x15, 0x3e, 0x5d, 0xbe, 0x75, 0xa3, 0x55, 0x00, 0x55, 0xa0, 0x50, 0x80,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x10, 0x00, 0x50, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x40, 0x00, 0x41, 0x80,
    0x41, 0x00, 0x40, 0x80, 0x41, 0x00, 0x40, 0x00, 0x41, 0x00, 0x01, 0x00, 0x15, 0x00, 0x44, 0x08,
    0x15, 0x00, 0x54, 0x00, 0x51, 0x00, 0x44, 0x00, 0x11, 0x00, 0x40, 0x00, 0x11, 0x00, 0x04, 0x00,
    0x11, 0x00, 0x14, 0x00, 0x11, 0x20, 0x50, 0x00, 0x11, 0x00, 0x14, 0x00, 0x11, 0x02, 0x54, 0x00,
    0x11, 0x00, 0x05, 0x00, 0x15, 0x00, 0x55, 0x00, 0x15, 0x3b, 0x55, 0xae, 0x55, 0xfa, 0xf5, 0xef,
    0x75, 0x00, 0x14, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00,
    0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x00, 0x01, 0x00, 0x40, 0x00,
    0x01, 0x00, 0x40, 0x00, 0x01, 0x00, 0x54, 0x00, 0x11, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x01, 0x00, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x04, 0x00, 0x11, 0x00, 0x40, 0x00,
    0x11, 0x00, 0x01, 0x00, 0x15, 0x00, 0x55, 0x80, 0x55, 0x02, 0x55, 0x0a, 0x55, 0xaf, 0x55, 0xbf,
    0x77, 0xfe, 0x54, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x50, 0x00, 0x10, 0x00, 0x11, 0x00, 0x11, 0x00, 0x04, 0x00,
    0x11, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x14, 0x36, 0x15, 0x00, 0x54, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x11, 0x00, 0x04, 0x00, 0x11, 0x02, 0x45, 0x00, 0x15, 0x00, 0x55, 0x00,
    0x15, 0x03, 0x05, 0x00, 0x15, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00,
    0x15, 0x08, 0x10, 0x00, 0x01, 0x00, 0x40, 0x00, 0x11, 0x00, 0x40, 0x00, 0x11, 0x00, 0x50, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t enemigo01[] PROGMEM={//16x8
    0x00, 0x20, 0xDC, 0xFE, 0x77, 0x3F, 0x1F, 0x3E, 0x31, 0x28, 0x44, 0x00, 0x40, 0x20, 0x10, 0x00,   // 0x0010 (16) pixels
};

const uint8_t player[] PROGMEM={//16x8
    0x11, 0x1F, 0x1E, 0x9E, 0x76, 0xFE, 0xDC, 0xFE, 0x77, 0x7F, 0x5A, 0x72, 0x60, 0xE0, 0x50, 0x70,   // 0x0010 (16) pixels
};

const uint8_t player2[] PROGMEM={//16x8
    0x50, 0x30, 0x51, 0x22, 0x71, 0x7E, 0x5C, 0xFE, 0x57, 0xFE, 0x5C, 0x9C, 0x54, 0x88, 0x50, 0x20,   // 0x0010 (16) pixels
};

const uint8_t tierra[] PROGMEM={//8*64
    0x55, 0xB8, 0x50, 0x80, 0x00, 0x00, 0x00, 0x00, 0x55, 0x23, 0x55, 0x8A, 0x54, 0xA0, 0x00, 0x00,   // 0x0010 (16) pixels
    0x55, 0xA2, 0x55, 0xAA, 0x55, 0x23, 0x55, 0x80, 0x55, 0x3F, 0x55, 0x0B, 0x55, 0x2A, 0x55, 0xAA,   // 0x0020 (32) pixels
    0x55, 0xFA, 0x55, 0x08, 0x55, 0x22, 0x55, 0xAA, 0x55, 0x23, 0x55, 0xA8, 0x55, 0x22, 0x55, 0x00,   // 0x0030 (48) pixels
    0x55, 0x02, 0x55, 0x0A, 0x55, 0x02, 0x00, 0x00, 0x15, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,   // 0x0040 (64) pixels
};

const uint8_t flecha[] PROGMEM={//8x8
    0x0, 0x0, 0x81, 0x81, 0xC3, 0xC3, 0x66, 0x0,
};

const uint8_t flecha2[] PROGMEM={//8x4
    0x06, 0x0c, 0x08, 0x00, 0x00, 0x08, 0x0c, 0x06
};

const uint8_t bala[] PROGMEM={//8x8
    0x10, 0x10, 0x14, 0x2e, 0x55, 0x38, 0x54, 0x28
};

//bool drawCollisionableBitmap(int,int,uint8_t*,int,int);

struct Sprite{
    byte posx,posy;
    byte type;
    void draw(){
        switch(type){
            case ENEMIGO:
                myOLED.drawBitmap(posx,posy,(uint8_t*)enemigo01,16,8);
                break;
            case BALA:
                myOLED.drawBitmap(posx,posy,(uint8_t*)bala,8,8);
                break;
            case PLAYER:
                myOLED.drawBitmap(posx,posy,(uint8_t*)player,16,8);
                break;
        }
    }
//    bool drawCollisionable(){
//        bool colision=false;
//        switch(type){
//            case ENEMIGO:
//                colision=drawCollisionableBitmap((int)posx,(int)posy,enemigo01,16,8);
//                break;
//            case BALA:
//                colision=drawCollisionableBitmap((int)posx,(int)posy,bala,8,8);
//                break;
//            case PLAYER:
//                colision=drawCollisionableBitmap((int)posx,(int)posy,player,16,8);
//                break;
//        }
//        return colision;
//    }
};

int readJoystick(byte,int,int);
void barraDeCarga();
void draw();
void moverplayer();
void disparar();
void ordenarSpritesDesc(Sprite[],byte);
void ordenarSpritesAsc(Sprite[],byte);
void avanceEnemigo();


byte x[5],y[5],con=254;
Sprite playerP;
Sprite balas[MAXBALAS];
Sprite enemigos[MAXENEMIGOS];
unsigned long time=0;
float promedio=0;
byte nbalas=0;
byte nEnemigos=0;
byte recargabalas=0;
byte genenemigos=0;

void setup()
{
    if(!myOLED.begin(SSD1306_128X64))
        while(1);   // In case the library failed to allocate enough RAM for the display buffer...
    myOLED.setBrightness(50);
    myOLED.rotateDisplay(false);
    myOLED.drawBitmap(0,0,(uint8_t*)portada,128,64);
    myOLED.update();
    pinMode(A3,INPUT);
    srandom(analogRead(A3));
    delay(2000);
    //barraDeCarga();
    time=millis();
    myOLED.setFont((uint8_t*)TinyFont);
    playerP.posx=8;
    playerP.posy=28;
    playerP.type=PLAYER;
}

void loop()
{
    draw();
}

void draw(){
    myOLED.clrScr();
    myOLED.drawBitmap(0,0,(uint8_t*)tierra,8,64);
    disparar();
    moverplayer();
    avanceEnemigo();
    myOLED.update();
}

void moverplayer(){
    playerP.posx-=readJoystick(A1,5,0);
    playerP.posy+=readJoystick(A2,5,0);
    if(playerP.posx<8){
        playerP.posx=8;
    }else if(playerP.posx>127-16){
        playerP.posx=127-16;
    }
    if(playerP.posy>200){
        playerP.posy=0;
    }else if(playerP.posy>63-8){
        playerP.posy=63-8;
    }
    playerP.draw();
    myOLED.drawBitmap(0,playerP.posy,(uint8_t*)flecha,8,8);
    myOLED.drawBitmap(playerP.posx+4,0,(uint8_t*)flecha2,8,4);
}

int readJoystick(byte pin,int maxval,int deadzone){
    int tem=analogRead(pin);
    if(tem>443+deadzone){
        tem-=443+deadzone;
        tem*=maxval/(443.0-deadzone);
    }else if(tem<443-deadzone){
        tem=maxval/(443.0-deadzone)*((443.0-deadzone)-tem);
        tem*=-1;
    }else{
        tem=0;
    }
    return tem;
}

void barraDeCarga(){
    uint8_t barra[]={0x7E};
    uint8_t fondoBarra[]={0x81};
    for(int i=0;i<128;i++){
        myOLED.drawBitmap(i,55,fondoBarra,1,8);
    }
    myOLED.update();
    for(int i=0;i<128;i+=2){
        myOLED.drawBitmap(i,55,barra,1,8);
        myOLED.update();
        delay(20);
    }
}
void disparar(){
    bool disp=false;
    bool b=digitalRead(A0);
    byte ibalas;
    if(!b&&nbalas<MAXBALAS&&recargabalas==0){
        if(nbalas==0){
            ibalas=0;
        }else{
            ibalas=nbalas;
        }
        balas[ibalas].posx=playerP.posx+16;
        balas[ibalas].posy=playerP.posy;
        balas[ibalas].type=BALA;
        nbalas++;
        ordenarSpritesAsc(balas,nbalas);
        recargabalas=RECARGA;
    }
    byte nb=nbalas;
    for(int i=nb;i>0;i--){
        balas[i-1].posx+=VELBALAS;
        if(balas[i-1].posx>127){
            nbalas--;
        }else{
            balas[i-1].draw();
        }
    }
    if(recargabalas>0){
        recargabalas--;
    }
}

void ordenarSpritesDesc(Sprite arr[],byte cont){
    Sprite tem;
    for(int i=0;i<cont-1;i++){
        for(int j=0;j<cont-i-1;j++){
            if(arr[j].posx<arr[j+1].posx){
                tem=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=tem;
            }
        }
    }
}

void ordenarSpritesAsc(Sprite arr[],byte cont){
    Sprite tem;
    for(int i=0;i<cont-1;i++){
        for(int j=0;j<cont-i-1;j++){
            if(arr[j].posx>arr[j+1].posx){
                tem=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=tem;
            }
        }
    }
}

void avanceEnemigo(){
    if(nEnemigos<MAXENEMIGOS && genenemigos==0){
        byte i=nEnemigos;
        enemigos[i].posy=random(0,64-8);
        enemigos[i].posx=127;
        enemigos[i].type=ENEMIGO;
        nEnemigos++;
        genenemigos=SEPENEMIGOS;
        ordenarSpritesDesc(enemigos,nEnemigos);
    }
    for(int i=nEnemigos;i>0;i--){
        enemigos[i-1].posx-=VELENEMIGOS;
        if(enemigos[i-1].posx>200&&enemigos[i-1].posx<255){
            nEnemigos--;
        }else{
//            if(enemigos[i-1].drawCollisionable()){
//                int xi=enemigos[i-1].posx;
//                int yi=enemigos[i-1].posy;
//                myOLED.drawRect(xi,yi,xi+16,yi+8);
//            }
            enemigos[i-1].draw();
        }
    }
    if(genenemigos>0){
        genenemigos--;
    }
}

//bool drawCollisionableBitmap(int x, int y, uint8_t* bitmap, int sx, int sy)
//{
//    bool colision=false;
//	int bit;
//	byte data;
//    uint16_t by, bi;
//	for (int cy=0; cy<sy; cy++)
//	{
//		bit= cy % 8;
//		for(int cx=0; cx<sx; cx++)
//		{
//			data=bitmapbyte(cx+((cy/8)*sx));
//			if ((data & (1<<bit))>0){
//                colision=myOLED.getPixel(x+cx, y+cy)||colision;
//			}else{
//				myOLED.clrPixel(x+cx, y+cy);
//            }
//		}
//	}
//	return colision;
//}
